grammar RelationalDynamicLogic;
import DynamicDifferentialLogic;

relDlProgram
    : relFormula EOF
    ;

relProgram
    : IDENTIFIER REL_DL_ASSIGNMENT_OPERATOR term
    | IDENTIFIER REL_DL_ASSIGNMENT_OPERATOR NON_DET
    | relProgram REL_DL_SEMICOLON relProgram
    | relProgram REL_DL_UNION_OPERATOR relProgram
    | REL_DL_OPEN_CURLY_BRACKETS relProgram REL_DL_CLOSE_CURLY_BRACKETS NON_DET
    | REL_DL_TERNARY_OPERATOR relFormula
    | REL_DL_OPEN_CURLY_BRACKETS IDENTIFIER_PRIME REL_DL_DIFFERENTIAL_EQUAL_OPERATOR relTerm REL_DL_AND_OPERATOR relFormula REL_DL_CLOSE_CURLY_BRACKETS
    | REL_DL_OPEN_BRACKETS program REL_DL_COMMA program REL_DL_CLOSE_BRACKETS
    ;

relFormula
    : relTerm REL_DL_COMPARISON_OPERATORS relTerm
    | REL_DL_NOT_OPERATOR relFormula
    | relFormula REL_DL_AND_OPERATOR relFormula
    | relFormula REL_DL_OR_OPERATOR relFormula
    | relFormula REL_DL_IMPLICATION_OPERATOR relFormula
    | relFormula REL_DL_BI_IMPLICATION_OPERATOR relFormula
    | REL_DL_OPEN_MODALITY_OPERATOR relProgram REL_DL_CLOSE_MODALITY_OPERATOR relFormula
    | REL_DL_OPEN_DIAMOND_MODALITY_OPERATOR relProgram REL_DL_CLOSE_DIAMOND_MODALITY_OPERATOR relFormula
    ;

relTerm
    : term PROGRAM_CONSIDERED
    ;

REL_DL_COMPARISON_OPERATORS : '==#' | '!=#' | '<=#' | '>=#' | '<#' | '>#';
PROGRAM_CONSIDERED : '@L' | '@R';
REL_DL_ASSIGNMENT_OPERATOR : ':=#';
REL_DL_SEMICOLON : ';#';
REL_DL_AND_OPERATOR : '&&#';
REL_DL_OR_OPERATOR : '||#';
REL_DL_IMPLICATION_OPERATOR : '->#';
REL_DL_BI_IMPLICATION_OPERATOR : '<->#';
REL_DL_OPEN_MODALITY_OPERATOR : '[#';
REL_DL_CLOSE_MODALITY_OPERATOR : ']#';
REL_DL_OPEN_DIAMOND_MODALITY_OPERATOR : '<<#';
REL_DL_CLOSE_DIAMOND_MODALITY_OPERATOR : '>>#';
REL_DL_UNION_OPERATOR : '++#';
REL_DL_OPEN_CURLY_BRACKETS : '{#';
REL_DL_CLOSE_CURLY_BRACKETS : '}#';
REL_DL_OPEN_BRACKETS : '(#';
REL_DL_CLOSE_BRACKETS : ')#';
REL_DL_TERNARY_OPERATOR : '?#';
REL_DL_DIFFERENTIAL_EQUAL_OPERATOR : '=#';
REL_DL_NOT_OPERATOR : '!#';
REL_DL_COMMA : ',#';