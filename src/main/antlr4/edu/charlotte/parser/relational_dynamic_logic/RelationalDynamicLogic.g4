grammar RelationalDynamicLogic;
import DynamicDifferentialLogic;

relDLProgram
    : relFormula EOF
    ;

relProgram
    : IDENTIFIER REL_ASSIGNMENT_OPERATOR term
    | IDENTIFIER REL_ASSIGNMENT_OPERATOR NON_DET
    | relProgram REL_SEMICOLON relProgram
    | relProgram REL_UNION_OPERATOR relProgram
    | REL_OPEN_CURLY_BRACKETS relProgram REL_CLOSE_CURLY_BRACKETS NON_DET
    | REL_TERNARY_OPERATOR relFormula
    | REL_OPEN_CURLY_BRACKETS IDENTIFIER_PRIME REL_DIFFERENTIAL_EQUAL_OPERATOR relTerm REL_AND_OPERATOR relFormula REL_CLOSE_CURLY_BRACKETS
    | REL_OPEN_BRACKETS program REL_COMMA program REL_CLOSE_BRACKETS
    ;

relFormula
    : relTerm REL_COMPARISON_OPERATORS relTerm
    | REL_NOT_OPERATOR relFormula
    | relFormula REL_AND_OPERATOR relFormula
    | relFormula REL_OR_OPERATOR relFormula
    | relFormula REL_IMPLICATION_OPERATOR relFormula
    | relFormula REL_BI_IMPLICATION_OPERATOR relFormula
    | REL_OPEN_MODALITY_OPERATOR relProgram REL_CLOSE_MODALITY_OPERATOR relFormula
    | REL_OPEN_DIAMOND_MODALITY_OPERATOR relProgram REL_CLOSE_DIAMOND_MODALITY_OPERATOR relFormula
    ;

relTerm
    : REL_OPEN_PROJECTION_BRACKETS term REL_CLOSE_PROJECTION_BRACKETS PROGRAM_CONSIDERED
    ;

REL_COMPARISON_OPERATORS : '==@R' | '!=@R' | '<=@R' | '>=@R' | '<@R' | '>@R';
PROGRAM_CONSIDERED : '#L' | '#R';
REL_ASSIGNMENT_OPERATOR : ':=@R';
REL_SEMICOLON : ';@R';
REL_AND_OPERATOR : '&&@R';
REL_OR_OPERATOR : '||@R';
REL_IMPLICATION_OPERATOR : '->@R';
REL_BI_IMPLICATION_OPERATOR : '<->@R';
REL_OPEN_MODALITY_OPERATOR : '[@R';
REL_CLOSE_MODALITY_OPERATOR : ']@R';
REL_OPEN_PROJECTION_BRACKETS : '[|';
REL_CLOSE_PROJECTION_BRACKETS : '|]';
REL_OPEN_DIAMOND_MODALITY_OPERATOR : '<<@R';
REL_CLOSE_DIAMOND_MODALITY_OPERATOR : '>>@R';
REL_UNION_OPERATOR : '++@R';
REL_OPEN_CURLY_BRACKETS : '{@R';
REL_CLOSE_CURLY_BRACKETS : '}@R';
REL_OPEN_BRACKETS : '(@R';
REL_CLOSE_BRACKETS : ')@R';
REL_TERNARY_OPERATOR : '?@R';
REL_DIFFERENTIAL_EQUAL_OPERATOR : '=@R';
REL_NOT_OPERATOR : '!@R';
REL_COMMA : ',@R';